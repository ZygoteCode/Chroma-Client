package net.minecraft.client.particle.chroma.module.exploit;

import java.util.ArrayList;
import java.util.concurrent.ThreadLocalRandom;

import io.netty.buffer.Unpooled;
import net.minecraft.client.Minecraft;
import net.minecraft.client.particle.chroma.Chroma;
import net.minecraft.client.particle.chroma.event.EventTarget;
import net.minecraft.client.particle.chroma.event.events.EventReceivePacket;
import net.minecraft.client.particle.chroma.event.events.EventSentPacket;
import net.minecraft.client.particle.chroma.event.events.EventUpdate;
import net.minecraft.client.particle.chroma.module.Category;
import net.minecraft.client.particle.chroma.module.Module;
import net.minecraft.client.particle.chroma.settings.Setting;
import net.minecraft.client.particle.chroma.utils.MovementUtils;
import net.minecraft.client.particle.chroma.utils.Timer;
import net.minecraft.entity.EntityLivingBase;
import net.minecraft.network.Packet;
import net.minecraft.network.PacketBuffer;
import net.minecraft.network.handshake.client.C00Handshake;
import net.minecraft.network.play.client.C00PacketKeepAlive;
import net.minecraft.network.play.client.C03PacketPlayer;
import net.minecraft.network.play.client.C0CPacketInput;
import net.minecraft.network.play.client.C0FPacketConfirmTransaction;
import net.minecraft.network.play.client.C13PacketPlayerAbilities;
import net.minecraft.network.play.client.C14PacketTabComplete;
import net.minecraft.network.play.client.C15PacketClientSettings;
import net.minecraft.network.play.client.C17PacketCustomPayload;
import net.minecraft.network.play.server.S00PacketKeepAlive;
import net.minecraft.network.play.server.S08PacketPlayerPosLook;
import net.minecraft.network.play.server.S12PacketEntityVelocity;
import net.minecraft.network.play.server.S27PacketExplosion;
import net.minecraft.network.play.server.S32PacketConfirmTransaction;
import net.minecraft.network.play.server.S39PacketPlayerAbilities;
import net.minecraft.network.play.server.S40PacketDisconnect;
import net.minecraft.util.ChatComponentText;
import net.minecraft.util.IChatComponent;

public class Disabler extends Module
{	
    private Timer timer;
    private int lastKey;
    private String mode;
    private boolean faithful = false, watchdog = false, erisium = false;
    private int agcsentkeepalives;
    private ArrayList<Packet> delayedtransactions;
    private ArrayList<Packet> delayedtransactions2;
    private ArrayList<Packet> verusFlyTrap;
    private int confirmtransactioncounter;
    private static boolean Crystalware;
    
	public Disabler()
	{
		super("Disabler", 43, Category.EXPLOIT);
	}
	
	@Override
	public void setup()
	{
		ArrayList<String> modes = new ArrayList<String>();
		modes.add("Global");
		modes.add("Hypixel");
		modes.add("Faithful");
		modes.add("Erisium");
		modes.add("SagePvP");
		modes.add("ColdNetwork");
		modes.add("Spartan");
		modes.add("CavePvP");
		modes.add("AntiGamingChair");
		modes.add("VeltPvP");
		modes.add("Sloth");
		modes.add("Solent");
		modes.add("Falcon");
		modes.add("Invaded");
		modes.add("Guardian");
		modes.add("Iris");
		modes.add("Badlion");
		modes.add("HypixelZoom");
		modes.add("Flash");
		modes.add("Flash2");
		modes.add("Flash3");
		modes.add("Venom");
		modes.add("HypixelDamage");
		modes.add("Ghostly");
		this.getSetManager().rSetting(new Setting(330, "Mode", "", this, "Global", modes));
		this.getSetManager().rSetting(new Setting(331, "Hypixel Flag", "", this, true));
		timer = new Timer();
		delayedtransactions = new ArrayList<Packet>();
		delayedtransactions2 = new ArrayList<Packet>();
		this.verusFlyTrap = new ArrayList<Packet>();
		super.setup();
	}
	
	@Override
	public void onDisable()
	{
		mc.timer.timerSpeed = 1.0F;
		
		if (this.getMode().equals("Iris"))
		{
            if (mc.playerController.gameIsSurvivalOrAdventure())
            {
                mc.thePlayer.capabilities.allowFlying = false;
            }
            
            else if (mc.playerController.isInCreativeMode())
            {
                mc.thePlayer.capabilities.allowFlying = true;
            }
            else
            {
                mc.thePlayer.capabilities.allowFlying = true;
            }
		}
		
		super.onDisable();
	}
	
	@Override
	public void onEnable()
	{
        if (mc.theWorld == null)
        {
        	return;
        }
        
        Crystalware = false;
        delayedtransactions.clear();
        confirmtransactioncounter = 0;
        erisium = false;
        timer.reset();
        mode = this.getMode();
        
        if (this.getMode().equals("Flash") || this.getMode().equals("Flash2") || this.getMode().equals("Flash3"))
        {
            mc.thePlayer.sendQueue.handleDisconnect(new S40PacketDisconnect((IChatComponent)new ChatComponentText("§7Reconnect to the server to make the Disabler working.")));
        }
        
        if (mode.equalsIgnoreCase("ViperMC"))
        {
            if (!mc.thePlayer.onGround)
            {
                this.toggle();
                Chroma.message("Try again on ground.");
            }
        }
        if (mode.equalsIgnoreCase("Hypixel"))
        {
            if (mc.thePlayer.onGround && mc.thePlayer.isCollidedVertically)
            {
                double x = mc.thePlayer.posX;
                double y = mc.thePlayer.posY;
                double z = mc.thePlayer.posZ;
                mc.thePlayer.sendQueue.addToSendQueueBypass(new C03PacketPlayer.C04PacketPlayerPosition(x, y + 0.16, z, true));
                mc.thePlayer.sendQueue.addToSendQueueBypass(new C03PacketPlayer.C04PacketPlayerPosition(x, y + 0.07, z, true));
                watchdog = true;
                Chroma.message("Wait 5 seconds, please.");
            }
            else
            {
                watchdog = false;
            }
        }
        else if (mode.equalsIgnoreCase("Faithful"))
        {
            Chroma.message("Re-login to make the Disabler working.");
        }
        else if (mode.equalsIgnoreCase("Spartan"))
        {
            if (mc.thePlayer.onGround)
            {
                mc.thePlayer.jump();
                
                for (int i = 0; i < 300; i++)
                {
                    mc.thePlayer.sendQueue.addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(mc.thePlayer.posX, mc.thePlayer.posY + 2.147483647E9, mc.thePlayer.posZ, false));
                }
            }
        }
        else if (this.getMode().equals("CavePvP"))
        {
            for (int i = 0; i < 20; i++)
            {
                mc.thePlayer.sendQueue.addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(mc.thePlayer.posX, mc.thePlayer.posY + 0.300001, mc.thePlayer.posZ, false));
                mc.thePlayer.sendQueue.addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(mc.thePlayer.posX, mc.thePlayer.posY, mc.thePlayer.posZ, false));
            }
            
            mc.thePlayer.sendQueue.addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(mc.thePlayer.posX, mc.thePlayer.posY, mc.thePlayer.posZ, true));
        }
        else if (this.getMode().equals("Badlion"))
        {
            mc.thePlayer.sendQueue.addToSendQueue((Packet)new C17PacketCustomPayload("MC|Brand", new PacketBuffer(Unpooled.buffer()).writeString("BLC|KOZ9FP")));
            this.toggle();
        }
        else if (this.getMode().equals("HypixelDamage"))
        {
            for (int i = 0; i < 10; ++i)
            {
                mc.thePlayer.sendQueue.addToSendQueue((Packet)new C03PacketPlayer.C04PacketPlayerPosition(mc.thePlayer.posX, mc.thePlayer.posY + 0.300001, mc.thePlayer.posZ, false));
                mc.thePlayer.sendQueue.addToSendQueue((Packet)new C03PacketPlayer.C04PacketPlayerPosition(mc.thePlayer.posX, mc.thePlayer.posY, mc.thePlayer.posZ, false));
            }
            
            mc.thePlayer.sendQueue.addToSendQueue((Packet)new C03PacketPlayer.C04PacketPlayerPosition(mc.thePlayer.posX, mc.thePlayer.posY, mc.thePlayer.posZ, true));
        }
        
		super.onEnable();
	}
	
	@EventTarget
	public void onUpdate(EventUpdate event)
	{
		this.setSuffix(" §7" + this.getMode());
		
        if (mode == null)
        {
            mode = this.getMode();
        }
        
        if (!mode.equalsIgnoreCase(this.getMode()))
        {
            mode = this.getMode();
            
            if (mode.equalsIgnoreCase("Faithful"))
            {
            	Chroma.message("Re-login to make the Disabler working.");
            }
        }
        
        if (mc.thePlayer.ticksExisted <= 1)
        {
            erisium = false;
        }
        
        if (mode.equalsIgnoreCase("ViperMC"))
        {
            if (timer.hasReach(3000))
            {
                event.setPosY(mc.thePlayer.posY + 0.4);
                return;
            }
            
            for (int i = 0; i < 10; i++)
            {
                boolean i2 = i > 2 && i < 8;
                double x = i2 ? 0.2 : -0.2D;
                C03PacketPlayer.C04PacketPlayerPosition packet = new C03PacketPlayer.C04PacketPlayerPosition(mc.thePlayer.posX, mc.thePlayer.posY + x, mc.thePlayer.posZ, true);
                mc.thePlayer.sendQueue.addToSendQueue(packet);
            }
        }
        else if (mode.equalsIgnoreCase("Hypixel"))
        {
        	if (!watchdog)
            {
                if (mc.thePlayer.onGround && mc.thePlayer.isCollidedVertically)
                {
                    double x = mc.thePlayer.posX;
                    double y = mc.thePlayer.posY;
                    double z = mc.thePlayer.posZ;
                    mc.thePlayer.sendQueue.addToSendQueueBypass(new C03PacketPlayer.C04PacketPlayerPosition(x, y, z, true));
                    mc.thePlayer.sendQueue.addToSendQueueBypass(new C03PacketPlayer.C04PacketPlayerPosition(x, y + 0.16, z, true));
                    mc.thePlayer.sendQueue.addToSendQueueBypass(new C03PacketPlayer.C04PacketPlayerPosition(x, y + 0.07, z, true));
                    watchdog = true;
                    Chroma.message("Wait 5 seconds, please.");
                }
            }
            else
            {
                mc.thePlayer.motionX = 0;
                mc.thePlayer.motionY = 0;
                mc.thePlayer.motionZ = 0;
                mc.thePlayer.jumpMovementFactor = 0;
                mc.thePlayer.noClip = true;
                mc.thePlayer.onGround = false;
            }
        }
        else if (mode.equalsIgnoreCase("Erisium"))
        {
            if (erisium && timer.hasReach(1500))
            {
                erisium = !erisium;
                mc.thePlayer.sendQueue.addToSendQueueBypass(new C00PacketKeepAlive(lastKey));
            }
        }
        else if (this.getMode().equalsIgnoreCase("AntiGamingChair"))
        {
            mc.timer.timerSpeed = 0.8F;
            
            if (mc.thePlayer.ticksExisted % 100 == 0 && !this.delayedtransactions.isEmpty())
            {
                mc.thePlayer.sendQueue.addToSendQueue(this.delayedtransactions.get(this.confirmtransactioncounter));
                ++this.confirmtransactioncounter;
            }
        }
        else if (this.getMode().equals("VeltPvP"))
        {
            if (this.timer.hasReach(1000.0D))
            {
                final double rand = ThreadLocalRandom.current().nextDouble(0.5, 2.0);
                mc.thePlayer.sendQueue.addToSendQueue((Packet)new C03PacketPlayer.C06PacketPlayerPosLook(mc.thePlayer.posX, mc.thePlayer.posY + 7951828.0 * rand, mc.thePlayer.posZ, mc.thePlayer.rotationYaw, mc.thePlayer.rotationPitch, true));
                this.timer.reset();
            }
        }
        else if (this.getMode().equals("Sloth"))
        {
            if (mc.thePlayer.ticksExisted < 100)
            {
                for (int i = 0; i < 2; i++)
                {
                    for (int a = 0; a < 5; ++a)
                    {
                        mc.thePlayer.sendQueue.addToSendQueue((Packet)new C03PacketPlayer.C04PacketPlayerPosition(mc.thePlayer.posX, mc.thePlayer.posY + 1.0, mc.thePlayer.posZ, false));
                    }
                    
                    for (int b = 0; b < 5; ++b)
                    {
                        mc.thePlayer.sendQueue.addToSendQueue((Packet)new C03PacketPlayer.C04PacketPlayerPosition(mc.thePlayer.posX, mc.thePlayer.posY + 0.5, mc.thePlayer.posZ, false));
                    }
                    
                    for (int c = 0; c < 5; ++c)
                    {
                        mc.thePlayer.sendQueue.addToSendQueue((Packet)new C03PacketPlayer.C04PacketPlayerPosition(mc.thePlayer.posX, mc.thePlayer.posY + 0.01, mc.thePlayer.posZ, true));
                    }
                }
            }
        }
        else if (this.getMode().equals("Solent"))
        {
            if (this.timer.hasReach(1000L))
            {
                for (int i = 0; i < 100; i++)
                {
                    final int r = ThreadLocalRandom.current().nextInt(0, Integer.MAX_VALUE);
                    mc.thePlayer.sendQueue.addToSendQueue((Packet)new C00PacketKeepAlive(r));
                }
                
                this.timer.reset();
            }
        }
        else if (this.getMode().equals("Guardian"))
        {
            if (mc.thePlayer.ticksExisted % 2 == 0)
            {
                event.setPosY(event.getPosY() + 1.0E-6);
            }
            
            if (mc.thePlayer.ticksExisted % 20 == 0)
            {
                mc.thePlayer.sendQueue.addToSendQueue((Packet)new C03PacketPlayer.C04PacketPlayerPosition(mc.thePlayer.posX, mc.thePlayer.posY, mc.thePlayer.posZ, true));
                mc.thePlayer.sendQueue.addToSendQueue((Packet)new C03PacketPlayer.C04PacketPlayerPosition(mc.thePlayer.posX, mc.thePlayer.posY + 12.0, mc.thePlayer.posZ, true));
            }
        }
        else if (this.getMode().equals("Iris"))
        {
            mc.thePlayer.capabilities.allowFlying = true;
            mc.thePlayer.sendQueue.addToSendQueue((Packet)new C13PacketPlayerAbilities(mc.thePlayer.capabilities));
        }
        else if (this.getMode().equals("Flash") || this.getMode().equals("Flash2") || this.getMode().equals("Flash3"))
        {
            if (mc.thePlayer.ticksExisted % 100 == 0 && !this.delayedtransactions2.isEmpty())
            {
                mc.thePlayer.sendQueue.addToSendQueueBypass((Packet)this.delayedtransactions2.get(this.confirmtransactioncounter));
                ++this.confirmtransactioncounter;
            }
            
            if (this.getMode().equals("Flash2"))
            {
                if (this.timer.hasReach(5000.0D))
                {
                    final double var = ThreadLocalRandom.current().nextDouble(0.1, 1000.0);
                    mc.thePlayer.sendQueue.addToSendQueueBypass((Packet)new C03PacketPlayer.C06PacketPlayerPosLook(mc.thePlayer.posX, mc.thePlayer.posY - 1000.0 * var, mc.thePlayer.posZ, mc.thePlayer.rotationYaw, mc.thePlayer.rotationPitch, mc.thePlayer.onGround));
                    this.timer.reset();
                }
            }
            else if (this.getMode().equals("Flash3") && (MovementUtils.isMoving() || this.durrrrrrr()) && mc.thePlayer.ticksExisted % 10 == 0)
            {
                for (int i = 0; i < this.verusFlyTrap.size(); i += 2)
                {
                    if (this.verusFlyTrap.get(i) != null)
                    {
                        mc.thePlayer.sendQueue.addToSendQueueBypass((Packet)this.verusFlyTrap.get(i));
                    }
                }
                
                this.verusFlyTrap.clear();
            }
        }
        else if (this.getMode().equals("Venom"))
        {
            for (int i = 0; i < 5; i++)
            {
                mc.thePlayer.sendQueue.addToSendQueue((Packet)new C03PacketPlayer.C06PacketPlayerPosLook(mc.thePlayer.posX, mc.thePlayer.posY, mc.thePlayer.posZ, mc.thePlayer.rotationYaw, mc.thePlayer.rotationPitch, true));
                mc.thePlayer.sendQueue.addToSendQueue((Packet)new C03PacketPlayer.C06PacketPlayerPosLook(mc.thePlayer.posX, mc.thePlayer.posY + 0.42, mc.thePlayer.posZ, mc.thePlayer.rotationYaw, mc.thePlayer.rotationPitch, false));
                mc.thePlayer.sendQueue.addToSendQueue((Packet)new C03PacketPlayer.C06PacketPlayerPosLook(mc.thePlayer.posX, mc.thePlayer.posY + 0.1, mc.thePlayer.posZ, mc.thePlayer.rotationYaw, mc.thePlayer.rotationPitch, false));
                mc.thePlayer.sendQueue.addToSendQueue((Packet)new C03PacketPlayer.C06PacketPlayerPosLook(mc.thePlayer.posX, mc.thePlayer.posY, mc.thePlayer.posZ, mc.thePlayer.rotationYaw, mc.thePlayer.rotationPitch, true));
            }
        }
	}
	
	@EventTarget
	public void onSentPacket(EventSentPacket event)
	{
        if (event.getPacket() instanceof C03PacketPlayer)
        {
            if (mode.equalsIgnoreCase("Hypixel") && watchdog)
            {
                event.setCancelled(true);
            }
        }
        else if (event.getPacket() instanceof C00PacketKeepAlive)
        {
            C00PacketKeepAlive packet = (C00PacketKeepAlive) event.getPacket();
            
            if (mode.equalsIgnoreCase("Faithful") || mode.equalsIgnoreCase("Erisium") || mode.equalsIgnoreCase("SagePvP") || mode.equalsIgnoreCase("ColdNetwork"))
            {
                event.setCancelled(true);
            }
        }
        else if (event.getPacket() instanceof C0FPacketConfirmTransaction)
        {
            C0FPacketConfirmTransaction packet = (C0FPacketConfirmTransaction) event.getPacket();
            int id = packet.getWindowId();
            boolean accepted = packet.isAccepted();
            int uid = packet.getUid();
            
            if (id == 0 && accepted)
            {
                if (mode.equalsIgnoreCase("SagePvP") || mode.equalsIgnoreCase("ColdNetwork"))
                {
                    event.setCancelled(true);
                }
            }
        }
        
        if (this.getMode().equals("CavePvP"))
        {
            if (event.getPacket() instanceof C00Handshake)
            {
            	event.setCancelled(true);
            }
            
            if (event.getPacket() instanceof C00PacketKeepAlive)
            {
            	event.setCancelled(true);
            }
            
            if (event.getPacket() instanceof S00PacketKeepAlive)
            {
                event.setCancelled(true);
            }
            
            if (event.getPacket() instanceof C13PacketPlayerAbilities)
            {
                final C13PacketPlayerAbilities C6 = (C13PacketPlayerAbilities) event.getPacket();
                C6.setAllowFlying(true);
                C6.setCreativeMode(true);
                C6.setFlying(true);
                C6.setInvulnerable(true);
                C6.allowFlying = true;
                C6.creativeMode = true;
                C6.flying = true;
                C6.invulnerable = true;
                event.setPacket(C6);
            }
            
            if (mc.thePlayer.ticksExisted > 3 && event.getPacket() instanceof C03PacketPlayer)
            {
                final C03PacketPlayer C03 = (C03PacketPlayer) event.getPacket();
                C03.setOnGround(true);
                event.setPacket(C03);
            }
        }
        else if (this.getMode().equals("AntiGamingChair"))
        {
            if (event.getPacket() instanceof C17PacketCustomPayload)
            {
                final C17PacketCustomPayload C8 = (C17PacketCustomPayload) event.getPacket();
                
                if (C8.channel == "MC|Brand")
                {
                    C8.data = new PacketBuffer(Unpooled.buffer()).writeString("BLC|KOZ9FP");
                }
                
                event.setPacket(C8);
            }
            else if (event.getPacket() instanceof C0FPacketConfirmTransaction && mc.thePlayer.ticksExisted % 100 != 0)
            {
                this.delayedtransactions.add(event.getPacket());
                event.setCancelled(true);
            }
            else if (event.getPacket() instanceof C00PacketKeepAlive)
            {
                if (this.agcsentkeepalives > 3)
                {
                    this.agcsentkeepalives = 0;
                }
                else
                {
                    event.setCancelled(true);
                    ++this.agcsentkeepalives;
                }
            }
            else if (event.getPacket() instanceof C03PacketPlayer)
            {
                final C03PacketPlayer C03 = (C03PacketPlayer) event.getPacket();
                C03.setOnGround(false);
                
                if (mc.thePlayer.ticksExisted % 2 == 0 && mc.thePlayer.ticksExisted % 10 != 0)
                {
                    if (mc.thePlayer.onGround)
                    {
                        C03.y = mc.thePlayer.posY + 0.125;
                    }
                    else
                    {
                        C03.y = mc.thePlayer.posY + Double.MIN_VALUE;
                    }
                }
                else if (mc.thePlayer.ticksExisted % 2 != 0 && mc.thePlayer.ticksExisted % 10 != 0)
                {
                    C03.y = mc.thePlayer.posY + Double.MIN_VALUE;
                }
                else if (mc.thePlayer.ticksExisted % 10 == 0)
                {
                    C03.y = mc.thePlayer.posY - 0.125;
                }
                
                event.setPacket(C03);
            }
        }
        else if (this.getMode().equals("Solent"))
        {
            if (event.getPacket() instanceof C03PacketPlayer)
            {
                final C03PacketPlayer C03 = (C03PacketPlayer) event.getPacket();
                
                if (mc.thePlayer.ticksExisted % 2 == 0)
                {
                    C03.y = mc.thePlayer.posY + 0.3;
                }
                else
                {
                    C03.y = mc.thePlayer.posY + Double.MIN_VALUE;
                }
                
                C03.setOnGround(false);
                event.setPacket(C03);
            }
            else if (event.getPacket() instanceof C14PacketTabComplete)
            {
                final C14PacketTabComplete C4 = (C14PacketTabComplete) event.getPacket();
                
                if (C4.getMessage().contains(".friend") || C4.getMessage().contains(".bind") || C4.getMessage().contains(".hack"))
                {
                    C4.message = "/help ";
                }
                
                event.setPacket(C4);
            }
        }
        else if (this.getMode().equals("Falcon"))
        {
            if (event.getPacket() instanceof C00PacketKeepAlive)
            {
                final C00PacketKeepAlive C7 = (C00PacketKeepAlive) event.getPacket();
                C7.key -= ThreadLocalRandom.current().nextInt(1, Integer.MAX_VALUE);
                event.setPacket(C7);
            }
        }
        else if (this.getMode().equals("Ghostly"))
        {
            if (event.getPacket() instanceof C00PacketKeepAlive || event.getPacket() instanceof C0FPacketConfirmTransaction)
            {
            	event.setCancelled(true);
            }
            
            if (event.getPacket() instanceof C03PacketPlayer && mc.thePlayer.ticksExisted % 4 == 0)
            {
                mc.thePlayer.sendQueue.addToSendQueue(new C0CPacketInput());
            }
        }
        else if (this.getMode().equals("Invaded"))
        {
            if (event.getPacket() instanceof C0FPacketConfirmTransaction)
            {
                event.setCancelled(true);
            }
            
            if (event.getPacket() instanceof C00PacketKeepAlive)
            {
            	event.setCancelled(true);
            }
            
            if (event.getPacket() instanceof C15PacketClientSettings)
            {
            	event.setCancelled(true);
                this.toggle();
            }
            
            if (event.getPacket() instanceof C17PacketCustomPayload)
            {
            	event.setCancelled(true);
            }
        }
        else if (this.getMode().equals("Guardian"))
        {
        	if (event.getPacket() instanceof C00Handshake)
        	{
        		event.setCancelled(true);
        	}
        }
        else if (this.getMode().equals("Iris"))
        {
            if (event.getPacket() instanceof C13PacketPlayerAbilities)
            {
                final C13PacketPlayerAbilities C6 = (C13PacketPlayerAbilities) event.getPacket();
                C6.setAllowFlying(true);
                C6.setCreativeMode(true);
                C6.setFlying(true);
                C6.setInvulnerable(true);
                event.setPacket(C6);
            }
        }
        else if (this.getMode().equals("HypixelZoom"))
        {
            if (this.getSetManager().getSettingById(331).getValBoolean() && !Crystalware && !mc.thePlayer.onGround && mc.thePlayer.fallDistance >= 1.0f)
            {
                if (event.getPacket() instanceof C03PacketPlayer)
                {
                	event.setCancelled(true);
                }
                
                mc.thePlayer.setVelocity(0.0, 0.0, 0.0);
                mc.thePlayer.motionX = 0.0;
                mc.thePlayer.motionY = 0.0;
                mc.thePlayer.motionZ = 0.0;
            }
            
            if (mc.thePlayer.hurtTime > 0 && !this.getSetManager().getSettingById(331).getValBoolean() && !Crystalware)
            {
                Crystalware = true;
            }
            
            if (mc.thePlayer.ticksExisted % 150 == 0 && !Crystalware && this.getSetManager().getSettingById(331).getValBoolean())
            {
                Crystalware = true;
            }
            
            if (Crystalware)
            {
                if (mc.thePlayer.onGround)
                {
                    mc.thePlayer.setPosition(mc.thePlayer.posX, mc.thePlayer.posY + 0.42, mc.thePlayer.posZ);
                }
                
                if (mc.thePlayer.movementInput.jump)
                {
                    mc.thePlayer.motionY = 3.0;
                }
                else if (mc.thePlayer.movementInput.sneak)
                {
                    mc.thePlayer.motionY = -3.0;
                }
                else
                {
                    mc.thePlayer.motionY = 0.0;
                }
            }
        }
        else if (this.getMode().equals("Flash") || this.getMode().equals("Flash2") || this.getMode().equals("Flash3"))
        {
            if (event.getPacket() instanceof C0FPacketConfirmTransaction)
            {
                final C0FPacketConfirmTransaction p4 = (C0FPacketConfirmTransaction) event.getPacket();
                
                if (mc.thePlayer.ticksExisted % 100 != 0)
                {
                    this.delayedtransactions2.add(event.getPacket());
                    event.setCancelled(true);
                }
            }
            
            if (event.getPacket() instanceof C00PacketKeepAlive)
            {
                final C00PacketKeepAlive c00PacketKeepAlive;
                final C00PacketKeepAlive packet = c00PacketKeepAlive = (C00PacketKeepAlive) event.getPacket();
                --c00PacketKeepAlive.key;
                event.setPacket(c00PacketKeepAlive);
            }
            
            if (this.getMode().equals("Flash3"))
            {
                final Minecraft mc5 = mc;
                
                if (mc.theWorld != null && mc.thePlayer != null && (MovementUtils.isMoving() || this.durrrrrrr()) && event.getPacket() instanceof C03PacketPlayer && mc.thePlayer.ticksExisted % 10 != 0)
                {
                    this.verusFlyTrap.add(event.getPacket());
                    event.setCancelled(true);
                }
            }
        }
        else if (this.getMode().equals("Venom"))
        {
    		if (event.getPacket() instanceof C00PacketKeepAlive)
    		{
                event.setCancelled(true);
                Packet packet = event.getPacket();
                
                (new Thread(() ->
                {
                   try
                   {
                	   Thread.sleep(250L);
                   }
                   catch (InterruptedException var4)
                   {
                	   
                   }

                   try
                   {
                	   mc.thePlayer.sendQueue.addToSendQueueBypass(packet);
                   }
                   catch (Exception var3)
                   {
                      ;
                   }
                }, "Venom-KeepAlive")).start();
    		}
        }
	}
	
    public boolean durrrrrrr()
    {
        return mc.gameSettings.keyBindForward.pressed || mc.gameSettings.keyBindBack.pressed || mc.gameSettings.keyBindLeft.pressed || mc.gameSettings.keyBindRight.pressed;
    }
	
	@EventTarget
	public void onReceivePacket(EventReceivePacket event)
	{
        if (event.getPacket() instanceof S00PacketKeepAlive)
        {
            S00PacketKeepAlive packet = (S00PacketKeepAlive) event.getPacket();
            int KEY = packet.func_149134_c();
            
            if (mode.equalsIgnoreCase("Erisium"))
            {
                timer.reset();
                erisium = true;
                lastKey = KEY;
            }
        }
        else if (event.getPacket() instanceof S08PacketPlayerPosLook)
        {
            S08PacketPlayerPosLook pac = (S08PacketPlayerPosLook) event.getPacket();
            pac.yaw = mc.thePlayer.rotationYaw;
            pac.pitch = mc.thePlayer.rotationPitch;
            
            if (watchdog && mode.equalsIgnoreCase("Hypixel"))
            {
                Chroma.message("You can do whatever you want for 5 seconds.");
                this.toggle();
            }
        }
        
        if (this.getMode().equals("CavePvP"))
        {
            if (event.getPacket() instanceof S39PacketPlayerAbilities)
            {
                final S39PacketPlayerAbilities S39 = (S39PacketPlayerAbilities) event.getPacket();
                S39.setAllowFlying(true);
                S39.setCreativeMode(true);
                S39.setFlying(true);
                S39.setInvulnerable(true);
                S39.allowFlying = true;
                S39.creativeMode = true;
                S39.flying = true;
                S39.invulnerable = true;
                event.setPacket(S39);
            }
        }
        else if (this.getMode().equals("VeltPvP"))
        {
        	if (event.getPacket() instanceof S00PacketKeepAlive)
        	{
        		event.setCancelled(true);
        	}
        }
        else if (this.getMode().equals("Solent"))
        {
        	if (event.getPacket() instanceof S00PacketKeepAlive)
        	{
        		event.setCancelled(true);
        	}
        }
        else if (this.getMode().equals("Iris"))
        {
            if (event.getPacket() instanceof S39PacketPlayerAbilities)
            {
                final S39PacketPlayerAbilities S39 = (S39PacketPlayerAbilities) event.getPacket();
                S39.setAllowFlying(true);
                S39.setCreativeMode(true);
                S39.setFlying(true);
                S39.setInvulnerable(true);
            }
        }
        else if (this.getMode().equals("HypixelZoom"))
        {
            if (event.getPacket() instanceof S27PacketExplosion || event.getPacket() instanceof S12PacketEntityVelocity)
            {
                event.setCancelled(true);
            }
        }
	}
}