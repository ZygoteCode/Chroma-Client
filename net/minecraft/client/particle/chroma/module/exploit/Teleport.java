package net.minecraft.client.particle.chroma.module.exploit;

import java.util.ArrayList;

import org.lwjgl.util.vector.Vector3f;

import net.minecraft.client.particle.chroma.event.EventTarget;
import net.minecraft.client.particle.chroma.event.events.EventBlockReach;
import net.minecraft.client.particle.chroma.event.events.EventClickBlock;
import net.minecraft.client.particle.chroma.event.events.EventSuperUpdate;
import net.minecraft.client.particle.chroma.module.Category;
import net.minecraft.client.particle.chroma.module.Module;
import net.minecraft.client.particle.chroma.settings.Setting;
import net.minecraft.client.particle.chroma.utils.MovementUtils;
import net.minecraft.client.particle.chroma.utils.PathUtils;
import net.minecraft.client.particle.chroma.utils.PlayerUtil;
import net.minecraft.network.play.client.C03PacketPlayer;
import net.minecraft.network.play.client.C0BPacketEntityAction;
import net.minecraft.network.play.client.C0BPacketEntityAction.Action;
import net.minecraft.util.MovingObjectPosition;

public class Teleport extends Module
{
	public Teleport()
	{
		super("Teleport", 34, Category.EXPLOIT);
	}
	
	@Override
	public void setup()
	{
		ArrayList<String> modes = new ArrayList<String>();
		modes.add("Vanilla");
		modes.add("Normal");
		modes.add("AAC 1.9.10");
		modes.add("AAC Old");
		modes.add("Rewinside (1)");
		modes.add("Rewinside (2)");
		modes.add("Rewinside (3)");
		modes.add("Minesucht");
		modes.add("Blink");
		modes.add("Flag");
		this.getSetManager().rSetting(new Setting(110, "Mode", "", this, "Vanilla", modes));
		this.getSetManager().rSetting(new Setting(111, "Safe teleport", "", this, false));
		super.setup();
	}
	
	@EventTarget
	public void onUpdate(EventSuperUpdate event)
	{
		this.setSuffix(" §7" + this.getMode());
	}
	
	@EventTarget
	public void onClickBlock(EventClickBlock event)
	{
		if (!mc.thePlayer.isDead && mc.objectMouseOver != null && mc.objectMouseOver.typeOfHit.equals(MovingObjectPosition.MovingObjectType.BLOCK) && mc.thePlayer.isSwingInProgress)
		{
			double x = event.getPos().getX();
			double y = event.getPos().getY();
			double z = event.getPos().getZ();
			x += 0.5;
			y += 1.0;
			z += 0.5;
			
			if (this.getMode().equals("Vanilla") || this.getMode().equals("Minesucht"))
			{
				mc.thePlayer.sendQueue.addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(x, y, z, true));
			}
			else if (this.getMode().equalsIgnoreCase("Normal"))
			{
		        ArrayList<Vector3f> vecs = PlayerUtil.vanillaTeleportPositions(x, y, z, 8.0);
		        
		        for (Vector3f vec : vecs)
		        {
		            this.mc.thePlayer.sendQueue.addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(vec.x, vec.y, vec.z, true));
		        }
			}
			else if (this.getMode().equalsIgnoreCase("AAC 1.9.10"))
			{
		        this.mc.thePlayer.sendQueue.addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(this.mc.thePlayer.posX, this.mc.thePlayer.posY, this.mc.thePlayer.posZ, true));
		        this.mc.thePlayer.sendQueue.addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(x, y, z, true));
		        this.mc.thePlayer.sendQueue.addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(this.mc.thePlayer.posX, this.mc.thePlayer.posY, this.mc.thePlayer.posZ, true));
		        this.mc.thePlayer.sendQueue.addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(this.mc.thePlayer.posX, this.mc.thePlayer.posY + 4.0, this.mc.thePlayer.posZ, true));
		        this.mc.thePlayer.sendQueue.addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(x, y, z, true));
		        PlayerUtil.setSpeed(0.04);
			}
			else if (this.getMode().equalsIgnoreCase("AAC Old"))
			{
		        ArrayList<Vector3f> vecs = PlayerUtil.vanillaTeleportPositions(x, y, z, 9.0);
		        
		        for (int i = 0; i < vecs.size(); ++i)
		        {
		            Vector3f vec = vecs.get(i);
		            this.mc.thePlayer.sendQueue.addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(vec.x, vec.y, vec.z, true));
		        }
		        
		        this.mc.thePlayer.sendQueue.addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(-2.0, this.mc.thePlayer.posY, this.mc.thePlayer.posZ, true));
			}
			else if (this.getMode().equalsIgnoreCase("Rewinside (1)"))
			{
		        for (int i = 0; i < 3; ++i)
		        {
		            ArrayList<Vector3f> vecs = PlayerUtil.vanillaTeleportPositions(x, y, z, 3.0);
		            
		            for (Vector3f vec : vecs)
		            {
		                this.mc.thePlayer.sendQueue.addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(vec.x, this.mc.thePlayer.prevPosY + 0.2, vec.z, true));
		                this.mc.thePlayer.sendQueue.addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(this.mc.thePlayer.posX, this.mc.thePlayer.posY + 0.02, this.mc.thePlayer.posZ, true));
		                if (this.mc.thePlayer.ticksExisted % 3 != 0) continue;
		                this.mc.thePlayer.sendQueue.addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(vec.x, 0.2, vec.z, true));
		            }
		        }
			}
			else if (this.getMode().equals("Rewinside (2)"))
			{
                mc.thePlayer.motionY = 0.1;
                mc.getNetHandler().addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(mc.thePlayer.posX, mc.thePlayer.posY, mc.thePlayer.posZ, true));
                mc.getNetHandler().addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(x, y, z, true));
                mc.getNetHandler().addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(mc.thePlayer.posX, mc.thePlayer.posY, mc.thePlayer.posZ, true));
                mc.getNetHandler().addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(mc.thePlayer.posX, mc.thePlayer.posY, mc.thePlayer.posZ, true));
                mc.getNetHandler().addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(x, y, z, true));
                mc.getNetHandler().addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(mc.thePlayer.posX, mc.thePlayer.posY, mc.thePlayer.posZ, true));
                MovementUtils.forward(0.04D);
			}
			else if (this.getMode().equals("Rewinside (3)"))
			{
                mc.thePlayer.motionY = 0.1;
                mc.getNetHandler().addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(x, y, z, true));
                mc.getNetHandler().addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(mc.thePlayer.posX, mc.thePlayer.posY + 0.6D, mc.thePlayer.posZ, true));
			}
			else if (this.getMode().equals("Blink"))
			{
				mc.getNetHandler().addToSendQueue(new C0BPacketEntityAction(mc.thePlayer, Action.STOP_SNEAKING));
                
				final double endX = x;
				final double endY = y;
				final double endZ = z;
				
                PathUtils.findBlinkPath(endX, endY, endZ).forEach(vector3d ->
                {
                    mc.getNetHandler().addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(vector3d.xCoord, vector3d.yCoord, vector3d.zCoord, true));
                    mc.thePlayer.setPosition(endX, endY, endZ);
                });
                
                mc.getNetHandler().addToSendQueue(new C0BPacketEntityAction(mc.thePlayer, Action.START_SNEAKING));
			}
			else if (this.getMode().equals("Flag"))
			{
                mc.getNetHandler().addToSendQueue(new C0BPacketEntityAction(mc.thePlayer, Action.STOP_SNEAKING));
                mc.getNetHandler().addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(mc.thePlayer.posX, mc.thePlayer.posY, mc.thePlayer.posZ, true));
                mc.getNetHandler().addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(x, y, z, true));
                mc.getNetHandler().addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(mc.thePlayer.posX, mc.thePlayer.posY, mc.thePlayer.posZ, true));
                mc.getNetHandler().addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(mc.thePlayer.posX, mc.thePlayer.posY + 5D, mc.thePlayer.posZ, true));
                mc.getNetHandler().addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(x, y, z, true));
                mc.getNetHandler().addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(mc.thePlayer.posX + 0.5D, mc.thePlayer.posY, mc.thePlayer.posZ + 0.5D, true));
                MovementUtils.forward(0.04D);
                mc.getNetHandler().addToSendQueue(new C0BPacketEntityAction(mc.thePlayer, Action.START_SNEAKING));
			}
			
			if (this.getSetManager().getSettingById(111).getValBoolean())
			{
				mc.thePlayer.setPosition(x, y, z);
			}
		}
		
		event.setCancelled(true);
	}
	
	@EventTarget
	public void onBlockReach(EventBlockReach event)
	{
		event.setReach(72.0F);
	}
}