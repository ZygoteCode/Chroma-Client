package net.minecraft.client.particle.chroma.module.exploit;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import joptsimple.internal.Strings;
import net.minecraft.client.particle.chroma.Chroma;
import net.minecraft.client.particle.chroma.event.EventTarget;
import net.minecraft.client.particle.chroma.event.events.EventReceivePacket;
import net.minecraft.client.particle.chroma.event.events.EventUpdate;
import net.minecraft.client.particle.chroma.module.Category;
import net.minecraft.client.particle.chroma.module.Module;
import net.minecraft.client.particle.chroma.utils.Timer;
import net.minecraft.network.play.client.C14PacketTabComplete;
import net.minecraft.network.play.server.S3APacketTabComplete;

public class PluginFinder extends Module
{
	private Timer timer;
	
	public PluginFinder()
	{
		super("PluginFinder", 123, Category.EXPLOIT);
		timer = new Timer();
	}
	
	@Override
	public void onEnable()
	{
		mc.getNetHandler().addToSendQueue(new C14PacketTabComplete("/"));
		timer.reset();
		super.onEnable();
	}
	
	@EventTarget
	public void onUpdate(EventUpdate event)
	{
		if (timer.hasReach(1000D))
		{
			Chroma.message("§7No plugins have been found.");
			timer.reset();
			this.setToggled(false);
		}
	}
	
	@EventTarget
	public void onReceivePacket(EventReceivePacket event)
	{
        if (event.getPacket() instanceof S3APacketTabComplete)
        {
            final S3APacketTabComplete s3APacketTabComplete = (S3APacketTabComplete) event.getPacket();

            final List<String> plugins = new ArrayList<>();
            final String[] commands = s3APacketTabComplete.func_149630_c();

            for (final String command1 : commands)
            {
                final String[] command = command1.split(":");

                if (command.length > 1)
                {
                    final String pluginName = command[0].replace("/", "");
                    
                    if (!plugins.contains(pluginName))
                    {
                    	plugins.add(pluginName);
                    }
                }
            }

            Collections.sort(plugins);

            if (!plugins.isEmpty())
            {
            	Chroma.message("§7Plugins §8(§c" + plugins.size() + "§8): §a" + Strings.join(plugins.toArray(new String[0]), "§7, §a"));
            }
            else
            {
            	Chroma.message("§7No plugins have been found.");
            }

            this.setToggled(false);
            timer.reset();
        }
	}
}